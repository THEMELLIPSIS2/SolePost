generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model article_tag {
  id       BigInt    @id @default(autoincrement())
  article  String?   @db.Uuid
  tag      BigInt?
  articles articles? @relation(fields: [article], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags     tags?     @relation(fields: [tag], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model articles {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  title        String
  content      String?
  published    Boolean       @default(false)
  release_date DateTime?     @db.Date
  category     enum_category @default(article)
  featured     Boolean       @default(false)
  author_id    String?
  article_tag  article_tag[]
  user         user?         @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id          BigInt        @id @default(autoincrement())
  name        String?       @default("")
  article_tag article_tag[]
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      account[]
  articles      articles[]
  sessions      session[]
  user_type     enum_user_type @default(contributor)
}

model verification_token {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum enum_category {
  article
  interview
  editorial
}

enum enum_user_type {
  admin
  editor
  contributor
}
