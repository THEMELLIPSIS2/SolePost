generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model article_tag {
  id       BigInt    @id(map: "Article_Tag_pkey") @default(autoincrement())
  article  String?   @db.Uuid
  tag      BigInt?
  articles articles? @relation(fields: [article], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags     tags?     @relation(fields: [tag], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model articles {
  id           String        @id(map: "Articles_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  title        String
  content      String?
  published    Boolean       @default(false)
  author_id    BigInt?
  release_date DateTime?     @db.Date
  category     enum_category @default(article)
  featured     Boolean       @default(false)
  article_tag  article_tag[]
  user         user?         @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id          BigInt        @id(map: "Tags_pkey") @default(autoincrement())
  name        String?       @default("")
  article_tag article_tag[]
}

model user {
  id         BigInt         @id(map: "User_pkey") @unique(map: "User_id_key") @default(autoincrement())
  name       String?
  created_at DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  email      String?
  user_type  enum_user_type @default(contributor)
  articles   articles[]
}

enum enum_category {
  article
  interview
  editorial
}

enum enum_user_type {
  admin
  editor
  contributor
}
